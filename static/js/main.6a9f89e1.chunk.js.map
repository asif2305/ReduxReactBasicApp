{"version":3,"sources":["compoents/Posts.js","actions/postActions.js","actions/types.js","compoents/Postform.js","reducer/postReducer.js","reducer/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","key","id","title","body","Component","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","Postform","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","createPost","postData","method","headers","JSON","stringify","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6a9f89e1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {fetchPosts} from '../actions/postActions'\r\nimport {PropTypes} from 'prop-types' \r\n class Posts extends Component {\r\n    componentWillMount(){\r\n        this.props.fetchPosts();\r\n    }\r\n    // new post property\r\n    componentWillReceiveProps(nextProps){\r\n     if(nextProps.newPost){\r\n         this.props.posts.unshift(nextProps.newPost) // unshift is used to add the item in the first\r\n     }\r\n    }\r\n    // constructor(props){\r\n    //     super(props);\r\n    //     this.state={\r\n    //         posts:[]\r\n    //     }\r\n\r\n    // }\r\n\r\n    // componentWillMount(){\r\n    //     fetch('https://jsonplaceholder.typicode.com/posts')\r\n    //       .then(res=>res.json())\r\n    //       .then(data=>this.setState({posts:data}));\r\n    // }\r\n    render() {\r\n        const postItems=this.props.posts.map(post=>(\r\n            <div key={post.id}>\r\n                <h3>{post.title}</h3>\r\n                <p>{post.body}</p>\r\n            </div>\r\n        ));\r\n        return (\r\n            <div>\r\n               <h1>Post</h1>  \r\n               {postItems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nPosts.propTypes={\r\n    fetchPosts:PropTypes.func.isRequired,\r\n    posts:PropTypes.array.isRequired,\r\n    newPost:PropTypes.object\r\n\r\n}\r\nconst mapStateToProps=state=>({\r\n    posts:state.posts.items,\r\n    newPost:state.posts.item\r\n});\r\nexport default connect(mapStateToProps,{fetchPosts})(Posts);\r\n","import {FETCH_POSTS,NEW_POSTS} from './types'\r\n\r\nexport const fetchPosts=()=>dispatch=>{\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res=>res.json())\r\n        .then(posts=>dispatch({\r\n            type:FETCH_POSTS,\r\n            payload:posts\r\n        }));\r\n    \r\n}\r\n\r\n\r\nexport  const createPost = postData =>dispatch=>\r\n{\r\n    fetch('https://jsonplaceholder.typicode.com/posts',{\r\n        method:'POST',\r\n        headers:{\r\n            'content-type':'application/json'\r\n        },\r\n        body:JSON.stringify(postData)\r\n    })\r\n    .then(res=>res.json())\r\n    .then(post=>dispatch({\r\n        type:NEW_POSTS,\r\n        payload:post\r\n    }));\r\n\r\n\r\n}\r\n\r\n","export const FETCH_POSTS='FETCH_POSTS';\r\nexport const NEW_POSTS='NEW_POSTS';\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {PropTypes} from 'prop-types'\r\nimport {createPost} from '../actions/postActions'\r\nclass Postform extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n           title:'',\r\n           body:''\r\n        };\r\n\r\n        this.onChange=this.onChange.bind(this);\r\n        this.onSubmit=this.onSubmit.bind(this);\r\n\r\n    }\r\n    onChange(e){\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n        });\r\n    }\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n\r\n        const post={\r\n            title:this.state.title,\r\n            body:this.state.body\r\n        }\r\n        // call action\r\n        this.props.createPost(post);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Post Add</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div>\r\n                        <label>Title:</label><br/>\r\n                        <input type='text' name='title'\r\n                         onChange={this.onChange}\r\n                        value={this.state.title}/>\r\n                    </div>\r\n                    <div>\r\n                        <label>Body:</label><br/>\r\n                        <textarea name='body' \r\n                         onChange={this.onChange}\r\n                        value={this.state.body}/>\r\n                    </div>\r\n                    <br/>\r\n                    <button type='submit'>Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nPostform.propTypes={\r\n    createPost:PropTypes.func.isRequired\r\n}\r\nexport default connect(null,{createPost})(Postform);\r\n","import {FETCH_POSTS,NEW_POSTS} from '../actions/types'\r\n\r\nconst initialState={\r\n    items:[],\r\n    item:{}\r\n}\r\n\r\nexport default function(state=initialState,action){\r\n  switch(action.type){\r\n    case FETCH_POSTS:\r\n      return{\r\n        ...state,\r\n        items:action.payload\r\n      }\r\n    case NEW_POSTS:\r\n      return {\r\n        ...state,\r\n        item:action.payload\r\n      }\r\n      default:\r\n          return state;\r\n  }\r\n}","import {combineReducers} from 'redux'\r\nimport postReducer from './postReducer'\r\n\r\nexport default combineReducers({\r\n    posts:postReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducer'\r\nconst initialState={};\r\nconst middleware=[thunk]\r\n\r\nconst store = createStore(rootReducer,initialState,\r\n    compose(applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n)\r\n\r\nexport default store;","import React from 'react';\nimport './App.css';\nimport Posts from './compoents/Posts'\nimport Postform from './compoents/Postform';\nimport {Provider} from 'react-redux'\nimport store from './store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n          <div className=\"App\">\n            <Postform/>\n            <Posts/>\n\n          </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}